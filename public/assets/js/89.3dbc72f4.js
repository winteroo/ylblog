(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{627:function(e,a,l){"use strict";l.r(a);var v=l(4),_=Object(v.a)({},(function(){var e=this,a=e.$createElement,l=e._self._c||a;return l("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[l("h2",{attrs:{id:"配置文件的种类"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#配置文件的种类"}},[e._v("#")]),e._v(" 配置文件的种类")]),e._v(" "),l("p",[e._v("babel的功能非常强大，但是如果没有配置文件，babel原封不动的输出我们的源代码，不做任何转码，所以，babel虽然强大，\n但是如果不能正确的配置配置文件，那babel的强大功能将被埋没，所以，学习如何配置配置文件是很有必要的。")]),e._v(" "),l("p",[e._v("babel的配置文件的种类常用的有以下几种：")]),e._v(" "),l("ul",[l("li",[l("p",[e._v(".babelrc.js")])]),e._v(" "),l("li",[l("p",[e._v("babel.config.js")])]),e._v(" "),l("li",[l("p",[e._v(".babelrc")])]),e._v(" "),l("li",[l("p",[e._v("babel.config.json")])]),e._v(" "),l("li",[l("p",[e._v("package.json中的babel字段")])])]),e._v(" "),l("p",[e._v("前两种配置文件均为js文件，我们可以在其中填入js逻辑来动态的配置babel")]),e._v(" "),l("p",[e._v("后三中采用的都是json的方式来配置，灵活性较前两种稍差。")]),e._v(" "),l("p",[e._v("所以，为了更灵活的配置babel，我们尽量选择前两种js文件的形式来配置babel。")]),e._v(" "),l("h2",{attrs:{id:"配置项"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#配置项"}},[e._v("#")]),e._v(" 配置项")]),e._v(" "),l("p",[e._v("babel的配置项还是比较多的，不过大部分的配置项对于我们来说是不需要关心的，我们需要关心的只有"),l("code",[e._v("presets")]),e._v("和"),l("code",[e._v("plugins")]),e._v("两个。")]),e._v(" "),l("ul",[l("li",[l("p",[l("code",[e._v("plugins")]),e._v("：插件，告诉babel如何去转码")])]),e._v(" "),l("li",[l("p",[l("code",[e._v("presets")]),e._v("：预设，即插件集合，babel的插件很多，一个个的添加插件是非常可怕的，所以将一类的插件组合为一个插件集合一起使用。")])])]),e._v(" "),l("h2",{attrs:{id:"总结"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),l("p",[e._v("本节我们了解了babel的配置文件种类以及基础的配置项，接下来我们会具体讲解如何配置这两项，但是在这之前我们必须先了解一个新的\n概念babel-polyfill。请看下节分解。")])])}),[],!1,null,null,null);a.default=_.exports}}]);