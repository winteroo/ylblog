tinymce.PluginManager.add('addController', function (editor, url) {

  var pluginName = '添加控件';

  /* 注册当input框选中时出现的菜单项 */
  var selectedControllerDom = null;
  // 真实的控件dom => <span><input/></span>格式
  // 确保获取到的控件dom元素为统一结构
  // 控件的编辑和删除用到的都是这个dom元素
  var controllerDom = null;

  //扔外部公共变量，也可以扔一个自定义的位置
  window.controllerConfig = {
    // 当前动作的标志 add：添加控件 edit：编辑控件
    actionType: 'add',
    // 待编辑的dom元素
    editDom: null
  };


  var baseURL = tinymce.baseURL;

  var ControllerIframe = baseURL + '/plugins/addController/index.html';

  /* 注册控件添加方法 */
  var openDialog = function () {
    window.controllerConfig.actionType = 'add';
    return editor.windowManager.openUrl({
      title: pluginName,
      width: 500,
      height: 380,
      url: ControllerIframe,
      buttons: [{
          type: 'cancel',
          text: 'Close'
        },
        {
          type: 'custom',
          text: 'Save',
          name: 'save',
          primary: true
        },
      ],
      onAction: processAddController
    });
  };
  /**
   * 处理添加控件按钮点击事件
   * @param {object} api editor内置api
   * @param {object} details 按钮的具体信息
   */
  function processAddController(api, details) {
    switch (details.name) {
      case 'save':
        // 说明验证通过
        if (controllerConfig.flag) {
          var addStr = getControllerContent();
          editor.insertContent(addStr);
          api.close();
        } else {
          // 检查输入内容是否满足要求
          controllerConfig.checkInput();
        }
        break;
      default:
        break;
    }
  }


  function getControllerContent() {
    var controllTypeItem = getControllerConfig();
    // 需要添加的控件
    var addContent = "<span dic-id=" + controllTypeItem.dicId + " id=" + controllTypeItem.spanId +
      "><input style='display:inline-block;width:100px;' type='text' disabled id=" + controllTypeItem.inputId + " value =" + controllTypeItem.value + " tag-id=" +
      controllTypeItem.tagId + " dic-id=" + controllTypeItem.dicId + " dic-type=" + controllTypeItem
      .dicType + "></span>";
    return addContent;
  }
  /* 注册控件编辑方法 */
  var openEditDialog = function () {
    window.controllerConfig.actionType = 'edit';
    window.controllerConfig.editDom = controllerDom;
    return editor.windowManager.openUrl({
      title: '编辑控件',
      width: 500,
      height: 380,
      url: ControllerIframe,
      buttons: [{
          type: 'cancel',
          text: 'Close'
        },
        {
          type: 'custom',
          text: 'Save',
          name: 'save',
          primary: true
        },
      ],
      onAction: processEditController
    });
  };
  /**
   * 处理编辑控件按钮点击事件
   * @param {object} api editor内置api
   * @param {object} details 按钮的具体信息
   */
  function processEditController(api, details) {
    switch (details.name) {
      case 'save':
        // 说明验证通过
        if (controllerConfig.flag) {
          var config = getControllerConfig();
          var inputDom = controllerDom.firstElementChild;
          editor.dom.setAttribs(controllerDom, {
            id: config.spanId,
            'dic-id': config.dicId
          });
          editor.dom.setAttribs(inputDom, {
            id: config.inputId,
            'dic-id': config.dicId,
            'dic-type': config.dicType,
            'tag-id': config.tagId,
            value: config.value
          });
          api.close();
        } else {
          // 检查输入内容是否满足要求
          controllerConfig.checkInput();
        }

        break;
      default:
        break;
    }
  }

  function getControllerConfig() {
    // 当前控件顺序
    var lastCount = sessionStorage.getItem('inputNum') || '1';
    var isCount = Number(lastCount) + 1;
    sessionStorage.setItem('inputNum', isCount);

    var newControllType = parent.controllerConfig.controllerType;
    var newControllName = parent.controllerConfig.autoControllerName;
    // 寻找对应选择框的数组数据
    var controllTypeItem = null;
    for (var i = 0; i < parent.controllerConfig.controllerList.length; i++) {
      if (parent.controllerConfig.controllerList[i].tagId === newControllType) {
        controllTypeItem = parent.controllerConfig.controllerList[i];
        break;
      }
    }
    // 非自定义控件
    if (controllTypeItem.dicType !== '2') {
      newControllName = controllTypeItem.label;
    } else {
      controllTypeItem.tagId = 'cc_' + new Date().getTime();
      controllTypeItem.dicId = new Date().getTime().toString().substring(9);
    }
    var obj = {
      spanId: 'par' + isCount,
      inputId: isCount,
      value: newControllName,
      dicId: controllTypeItem.dicId,
      tagId: controllTypeItem.tagId,
      dicType: controllTypeItem.dicType
    };
    return obj
  }

  /* 注册控件删除方法 */
  var deleteDialog = function () {
    return editor.windowManager.confirm("确定删除该控件吗？", function (s) {
      if (s) {
        var inputDom = controllerDom.firstElementChild;
        // 移除input框
        editor.dom.remove(inputDom);
        // 移除span标签的自定义属性
        controllerDom.removeAttribute('id')
        controllerDom.removeAttribute('dic-id')
        // 将光标放到editor内容的最后，消除工具栏弹出层
        editor.execCommand('selectAll');
        editor.selection.getRng().collapse(false);
        editor.focus();
        editor.notificationManager.open({
          text: '成功删除控件！',
          type: 'success'
        });
        // 关闭通知
        setTimeout(function () {
          top.tinymce.activeEditor.notificationManager.close();
        }, 2000);
      } else {}
    });
  };

  editor.ui.registry.getAll().icons.plus;

  /* 添加控件 */
  editor.ui.registry.addButton('addController', {
    icon: 'plus',
    tooltip: pluginName,
    onAction: function () {
      openDialog();
    }
  });
  editor.ui.registry.addMenuItem('addController', {
    icon: 'plus',
    text: pluginName,
    onAction: function () {
      openDialog();
    }
  });
  /* 编辑控件 */
  editor.ui.registry.addButton('editController', {
    icon: 'edit-block',
    tooltip: '编辑控件',
    onAction: function () {
      openEditDialog();
    }
  });
  /* 删除控件 */
  editor.ui.registry.addButton('deleteController', {
    icon: 'table-delete-table',
    tooltip: '删除控件',
    onAction: function () {
      deleteDialog();
    }
  });

  /**
   * 判断是否出现控件工具栏
   * @param {object} e 选区 
   */
  function judge(e) {
    var flag = false;
    if (testNode(e) && testSelection(editor.selection)) {
      // 当判断通过时，将控件dom元素赋值给后续操作的controllerDom
      controllerDom = selectedControllerDom;
      flag = true;
    } else {
      flag = false;
    }
    // console.log('控件dom： ', controllerDom);
    return flag;
  }

  /**
   * 验证是否是选中的控件
   * @param {oject} e 选中dom元素 
   */
  function testNode(e) {
    var flag = false;
    // 如果当前选中的区域为input，则通过
    if (e.nodeName === 'INPUT') {
      flag = true;
    } else if (
      // 如果当前选中的是input的外层，且第一个子元素是input，通过
      // 因为控件input外会包裹一层span标签，有可能选中的是span标签，但视觉上
      // 和选中input是一样的
      e.firstElementChild &&
      e.firstElementChild.nodeName === 'INPUT'
    ) {
      flag = true;
    } else {
      flag = false;
    }
    return flag;
  }

  /**
   * 验证选区是否符合验证条件
   * @param {object} selection 选区 
   */
  function testSelection(selection) {
    var flag = false;
    if (
      selection.getRng().startContainer.childNodes[0] &&
      selection.getRng().startContainer.childNodes[0].nodeName === 'INPUT'
    ) {
      flag = true;
      selectedControllerDom = selection.getRng().startContainer;
    } else {
      flag = false;
    }
    return flag;
  }

  editor.ui.registry.addContextToolbar("inputSelection", {
    predicate: judge,
    items: 'editController deleteController',
    position: "selection"
  });

  return {
    getMetadata: function () {
      return {
        name: pluginName,
        url: "",
      };
    }
  };
});